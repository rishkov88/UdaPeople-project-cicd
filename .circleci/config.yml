version: 2.1

orbs:
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters: # Add parameter here
      to: 
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
#          command: echo "bravo, vous avez échoué le server"
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.to >> && \
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.to >>

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0   # Docker image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:    # job code
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail

  build-backend:
    docker:
      - image: circleci/node:13.8.0   # Docker image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:    # job code
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail

  test-frontend:
    docker:
      - image: circleci/node:13.8.0   # Docker image
    steps:
      - checkout    # Checkout code from git
      - restore_cache:
          keys: [frontend-build]    # Restore from cache
      - run:    # job code
          name: Test front-end
          command: |
            cd frontend   
            npm install   
            npm run test
      - slack/notify:
          event: fail
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0   # Docker image
    steps:
      - checkout    # Checkout code from git
      - restore_cache:
          keys: [backend-build]    # Restore from cache
      - run:    # job code
          name: Test back-end
          command: |
            cd backend   
            npm install   
            npm run test
      - slack/notify:
          event: fail

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0   # Docker image
    steps:
      - checkout    # Checkout code from git
      - restore_cache:
          keys: [frontend-build]    # Restore from cache
      - run:    # job code
          name: Front-end Scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
     
  scan-backend:
    docker:
      - image: circleci/node:13.8.0   # Docker image
    steps:
      - checkout    # Checkout code from git
      - restore_cache:
          keys: [backend-build]    # Restore from cache
      - run:    # job code
          name: Back-end Scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail

  deploy-infrastructure:
    docker: 
      - image: amazon/aws-cli    # Docker image here that supports AWS CLI
    steps:
      - checkout    # Checkout code from git
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --tags project=udapeople \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} 

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags project=udapeople \
            --stack-name frontend-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}  
              
      - run:
          name: Add public ip to ansible inventory
          command: |
            aws ec2 describe-instances --query \
            "Reservations[*].Instances[*].PublicIpAddress" --output text >> .circleci/ansible/inventory.txt
      - run:  yum install tar -y && yum install gzip -y
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment # Here's where you will add some code to rollback on failure  
      - slack/notify:
          event: always



workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]

