version: 2.1

orbs:
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters: # Add parameter here
      to: 
        type: string
       # default: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name << parameters.to >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      to:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/H2YaTZdxuPbnTP6Y4JDRGx/migration_<< parameters.to >>)
            echo "value=$SUCCESS"
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0 
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:    
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail

  build-backend:
    docker:
      - image: circleci/node:13.8.0  
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:    
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail

  test-frontend:
    docker:
      - image: circleci/node:13.8.0   
    steps:
      - checkout    
      - restore_cache:
          keys: [frontend-build]    
      - run:    
          name: Test front-end
          command: |
            cd frontend   
            npm install   
            npm run test
      - slack/notify:
          event: fail
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0   
    steps:
      - checkout    
      - restore_cache:
          keys: [backend-build]    
      - run:    
          name: Test back-end
          command: |
            cd backend   
            npm install   
            npm run test
      - slack/notify:
          event: fail

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0   
    steps:
      - checkout    
      - restore_cache:
          keys: [frontend-build]    
      - run:    
          name: Front-end Scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
     
  scan-backend:
    docker:
      - image: circleci/node:13.8.0  
    steps:
      - checkout   
      - restore_cache:
          keys: [backend-build]   
      - run:   
          name: Back-end Scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail

  deploy-infrastructure:
    docker: 
      - image: amazon/aws-cli  
    steps:
      - checkout    
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --tags project=udapeople \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags project=udapeople \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
            --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add public ip to ansible inventory
          command: |
            aws ec2 describe-instances --query \
            "Reservations[*].Instances[*].PublicIpAddress" --filter "Name=tag:project,Values=udapeople" \
            --output text >> ~/project/.circleci/ansible/inventory.txt
      - run:  yum install tar -y && yum install gzip -y && touch ~/project/.circleci/ansible/OldWorkflowID.txt
      - run: 
          name: save old workflowid
          command: |
            aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text > ~/project/.circleci/ansible/OldWorkflowID.txt
            aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text
            cat ~/project/.circleci/ansible/OldWorkflowID.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - project/.circleci/ansible/OldWorkflowID.txt
      - slack/notify:
          event: fail
      - destroy-environment:
          to: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}    
      - destroy-environment:
          to: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}    

  configure-infrastructure:
    docker:
      - image: python:3.9-bullseye
    steps:
      - checkout  
      - add_ssh_keys:
          fingerprints: "3d:d8:77:38:1a:5e:75:7a:9d:d8:13:37:de:57:e7:23" 
      - attach_workspace:
          at: ~/   
      - run:
          name: Install dependencies
          command: |
            apt-get update
            apt-get install ansible -y
            apt-get install awscli -y
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml 
      - slack/notify:
          event: fail
      - destroy-environment:
          to: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          to: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: python:3.9-bullseye   
    steps:
      - checkout    
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apt-get update -y
            apt-get install nodejs -y
            apt-get install npm -y
            apt-get install awscli -y
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat ~/project/backend/migrations_dump.txt
      - run: 
          name: Send migration results to kvdb
          command: |   
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                curl --insecure https://kvdb.io/H2YaTZdxuPbnTP6Y4JDRGx/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - run: curl --insecure https://kvdb.io/H2YaTZdxuPbnTP6Y4JDRGx/migration_${CIRCLE_WORKFLOW_ID:0:7}
      
      - destroy-environment:
          to: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          to: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: python:3.9-bullseye 
    steps:
      - checkout
      - attach_workspace:
          at: ~/    
      - run:
          name: Install dependencies
          command: |
            apt-get update -y
            apt-get install nodejs -y
            apt-get install npm -y
            apt-get install awscli -y
            apt-get install ansible -y
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query \
            "Reservations[*].Instances[*].PublicIpAddress" --output text \
            --filters "Name=tag:project,Values=udapeople")
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          to: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          to: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations

  deploy-backend:
    docker:
      - image: python:3.9-bullseye 
    steps:
      - checkout
      - attach_workspace:
          at: ~/    
      - run:
          name: Install dependencies
          command: |
            apt-get update -y
            apt-get install nodejs -y
            apt-get install npm -y
            apt-get install awscli -y
            apt-get install ansible -y
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
      - run: 
          name:  zip backend # Zip the directory
          command: |
            tar -C backend -czvf artifact.tar.gz .
      - run:
          name: deploy artifacts            # mkdir roles/deploy/files # cp artifact.tar.gz roles/deploy/files/artifact.tar.gz
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml   
      - run: 
          name: clean up s3 bucket
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive && aws s3 ls
          when: on_fail
      - destroy-environment:
          to: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          to: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations

  smoke-test:
    docker:
      - image: python:3.9-bullseye 
    steps:
      - checkout    
      - run:
          name: Install dependencies
          command: |
            apt-get update -y
            apt-get install nodejs -y
            apt-get install npm -y
            apt-get install awscli -y
      - run:
          name: Get backend url and Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --query \
            "Reservations[*].Instances[*].PublicIpAddress" \
            --filter "Name=tag:project,Values=udapeople" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl ${API_URL}/api/status | grep "ok"
            then
                echo "Backend smoke test is PASSED"
            else
                echo "Backend smoke test failed"
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                echo "Frontend smoke test is PASSED"
              else
                echo "Frontend smoke test failed"
                exit 1
              fi
      - run: 
          name: clean up s3 bucket
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive && aws s3 ls
          when: on_fail
      - destroy-environment:
          to: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          to: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations 

  cloudfront-update:
    docker:
      - image: python:3.9-bullseye 
    steps:
      - checkout    
      - run:
          name: Install dependencies
          command: |
            apt-get update -y
            apt-get install nodejs -y
            apt-get install npm -y
            apt-get install awscli -y
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - run: 
          name: clean up s3 bucket
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive && aws s3 ls
          when: on_fail
      - destroy-environment:
          to: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          to: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations 
       
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: install dependencies
          command: |
            yum install tar -y 
            yum install gzip -y
      - attach_workspace:
          at: ~/
      - run:
          name: Remove old stacks and files
          command: |
            OldWorkflowID=$(cat ~/project/.circleci/ansible/OldWorkflowID.txt)
            echo "OldWorkflowID: ${OldWorkflowID}"
            echo "CIRCLE_WORKFLOW_ID ${CIRCLE_WORKFLOW_ID:0:7}"
            if [[ "udapeople-${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
              then
                echo "******************Delete Bleue Version Confirmed*********************"
                aws s3 rm s3://${OldWorkflowID} --recursive
                aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID:10:17}
                aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID:10:17}
            else
                echo "**********************************************************************"
                echo "*******************Cannot Clean Up Bleue Version**********************"
                echo "**********************************************************************"
            fi
        

workflows:
  default:
    jobs:
      - build-frontend:
          filters:
           branches:
             only: [master, dev-branch]
      - build-backend:
          filters:
           branches:
             only: [master, dev-branch]
      - test-frontend:
          requires: [build-frontend]
          filters:
           branches:
             only: [master, dev-branch]
      - test-backend:
          requires: [build-backend]
          filters:
           branches:
             only: [master, dev-branch]
      - scan-backend:
          requires: [build-backend]
          filters:
           branches:
             only: [master, dev-branch]
      - scan-frontend:
          requires: [build-frontend]
          filters:
           branches:
             only: [master, dev-branch]
      - deploy-infrastructure:
         requires: [test-frontend, test-backend, scan-frontend, scan-backend]
         filters:
           branches:
             only: [master]
      - configure-infrastructure:
         requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-backend:
          requires: [run-migrations, configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations, configure-infrastructure, deploy-backend]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
      